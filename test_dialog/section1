#!/bin/bash
title="Arcris Install"
title_menu="-| Arcris for fun|-"

##################################################################
#               Variables declaration
##################################################################
title_user_main="-| Usuario |-"
msg_user_main="\nEscriba su usuario y contraseña. \n "
btn_ok_main="< De Acuerdo >"

titleuser="-| Crea una cuenta de usuario |-"

msg_username="\nIntroduzca un nombre de usuario para el nuevo Usuario \n\nEl nombre de usuario debe comenzar con una letra minúscula,\nque puede ir seguida de cualquier combinación de números,\nletras minúsculas o el símbolo de guión. [ - ] \n\nNombre de usuario de su cuenta:"

title_reserved_usernames="-| ERROR: Nombre de usuario reservado |-"

msg_reserved_usernames="\nEl nombre de usuario que ingresaste está reservado para uso del sistema.\n\n- Escriba uno diferente."

title_passwuser="-| Establecer la contraseña |-"

msg_passwduser="\nElija una contraseña para"

title_passwuserconfirm="-| Establecer la contraseña para"

msg_passwuserconfirm="\nVuelva a ingresar la contraseña para verificar:\n "

title_passwusernull="-| ERROR: contraseña vacía |-"

msg_passwusernull="\nNo se le permite tener una contraseña vacía.\n "

msg_passwuserfail="\nLas dos contraseñas que ha introducido no coinciden.\n "

title_userfail="-| ERROR: Formato de nombre de usuario no válido |-"

msg_userfail="\nIngresaste un nombre de usuario no válido.\n\nEl nombre de usuario debe comenzar con una letra minúscula, que puede ir seguida de cualquier combinación de números, letras minúsculas o el símbolo de guión, y no debe tener más de 20 caracteres.\n "

msg_passwdroot_main="\nEscriba su contraseña de administrador. \n "

title_passroot="-| Establecer la contraseña de root |-"

msg_passroot="\nIntroduzca una contraseña para 'root',\nla cuenta de administrador del sistema. \n\nContraseña de root:\n "

title_passroot_confirm="-| Confirma la contraseña de root |-"

msg_passroot_confirm="\nVuelva a ingresar la contraseña root para verificar: \n "

title_passrootnull="-| ERROR: contraseña vacía |-"

msg_passrootnull="\nNo se le permite tener una contraseña vacía.\n" 

title_passroot_error="-| ERROR: las contraseñas no coinciden |-"

msg_passroot_error="\nLas dos contraseñas que ha introducido no coinciden.\n "


###############################
title_hostname="-| Hostname |-"

msg_hostname="\nUna sola palabra que identifica su sistema en la red.\n\nPor favor ingrese el nombre de host para este sistema:\n "

title_hostname_fail="-| ERROR: Formato de nombre no válido |-"

msg_hostname_fail="\nIngresó un nombre de host no válido. \n\nUn nombre de host válido puede contienen solo los números 0-9,\nletras mayúsculas y minúsculas (A-Z y a-z), y el signo menos.\n\nDebe tener como máximo 63 caracteres y no puede comenzar \no terminar con un signo menos."
###############################


users () {



hostname=""
username=""
userpasswd=""
rootpasswd=""

dialog --backtitle "${title}" --title "${title_user_main}" --stdout --ok-label "${btn_ok_main}"  --msgbox "${msg_user_main}" 7 37

##########################
# USER
##########################
while true; do
username=$(dialog --backtitle "${title}" --title "${titleuser}" \
--nocancel --inputbox "${msg_username}" 15 65 3>&1 1>&2 2>&3)

    if [ $? -eq 0 ]; then
    #El nombre de usuario debe comenzar con una letra minúscula. 
    #Puede contener minúsculas alfanuméricas y guiones.
      if printf "%s" "${username}" | grep -Eoq "^[a-z][a-z0-9-]*$" \
       && [ "${#username}" -lt 20 ]; then
        
        # El archivo de nombre de usuario reservado contiene nombres de usuario que deben evitarse
        if grep -Fxq $username reserved_usernames ; then
          
          dialog --backtitle "${title}" --title "${title_reserved_usernames}" --msgbox "${msg_reserved_usernames}" 10 40
        
        else 
          
          inputs_match=false
          
          while ! $inputs_match; do

            input=$(dialog --backtitle "${title}" --title "${title_passwuser}" --clear \
              --stdout --nocancel --insecure --passwordbox "${msg_passwduser} $username:\n " 10 55)
            confirm_input=$(dialog --backtitle "${title}" --title "${title_passwuserconfirm} $username |-" \
              --clear --stdout --insecure --no-cancel --passwordbox "${msg_passwuserconfirm}" 10 55)

            if [ -z "$input" ]; then

              dialog --backtitle "${title}" --title "${title_passwusernull}" --msgbox "${msg_passwusernull}" 7 60
            
            elif [ "$input" != "$confirm_input" ]; then

              dialog --backtitle "${title}" --title "${title_error}" --msgbox "${msg_passwuserfail}" 7 60
            else
              userpasswd="$input"
              inputs_match=true
            fi
          done
          break
        fi
      else
        dialog --backtitle "${title}" --title "${title_userfail}" --msgbox "${msg_userfail}" 11 80
      fi
    fi
  done



##########################
# HOSTNAME
##########################
while true; do
    hostname=$(dialog --backtitle "${title}" --title "${title_hostname}" --nocancel \
    --inputbox "${msg_hostname}" 12 65 "ArcriS" 3>&1 1>&2 2>&3)


   # Hostname must be alpha-numeric and may contain a dash only in between
    if printf "%s" "$hostname" | grep -Eoq "^[a-zA-Z0-9-]{1,63}$" \
      && [ "${hostname:0:1}" != "-" ] \
      && [ "${hostname: -1}" != "-" ]; then
      break
    else
      dialog --backtitle "${title}"  --title "${title_hostname_fail}" --msgbox "${msg_hostname_fail}" 12 68
    fi

done


dialog --backtitle "${title}" --title "-| Root |-" --stdout --ok-label "${btn_ok_main}"  --msgbox "${msg_passwdroot_main}" 7 43

##########################
# PASSWD ROOT
##########################
inputs_match=false
  while ! $inputs_match; do
    input=$(dialog --backtitle "${title}" --title "${title_passroot}" --clear --stdout --nocancel \
      --insecure --passwordbox "${msg_passroot}" 13 50)
    confirm_input=$(dialog --backtitle "${title}" --title "${title_passroot_confirm}" --clear --stdout --no-cancel \
      --insecure --passwordbox "${msg_passroot_confirm}" 10 60)
        

    if [ -z "$input" ]; then
      dialog --backtitle "${title}" --title "${title_passrootnull}" --msgbox "${msg_passrootnull}" 7 55
    elif [ "$input" != "$confirm_input" ]; then
      dialog --title "${title_passroot_error}" --msgbox "${msg_passroot_error}" 7 58
    else
      rootpasswd="$input"
      inputs_match=true
    fi
  done


  sectionuser=1

}

users